package com.example.baboonchat.ui.chat

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageButton
import android.widget.ProgressBar
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.baboonchat.R
import com.example.baboonchat.data.model.Message
import com.example.baboonchat.data.model.MessageType
import com.google.android.material.textfield.TextInputEditText

/**
 * Fragment that handles the chat interface
 */
class ChatFragment : Fragment() {

    private val TAG = "ChatFragment"
    
    // Views
    private lateinit var recyclerView: RecyclerView
    private lateinit var messageInput: TextInputEditText
    private lateinit var sendButton: ImageButton
    private lateinit var progressBar: ProgressBar
    private lateinit var emptyStateText: TextView
    
    // Adapter
    private lateinit var messageAdapter: MessageAdapter
    
    // ViewModel - shared with the activity
    private lateinit var viewModel: ChatViewModel
    
    override fun onCreateView(
        inflater: LayoutInflater, 
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_chat, container, false)
    }
    
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        
        // Initialize views
        initViews(view)
        
        // Get ViewModel from activity to ensure it's shared
        viewModel = ViewModelProvider(requireActivity())[ChatViewModel::class.java]
        
        // Initialize adapter
        setupAdapter()
        
        // Observe messages from ViewModel
        observeViewModel()
        
        // Set up listeners
        setupListeners()
    }
    
    private fun initViews(view: View) {
        recyclerView = view.findViewById(R.id.messages_recycler_view)
        messageInput = view.findViewById(R.id.message_input)
        sendButton = view.findViewById(R.id.send_button)
        progressBar = view.findViewById(R.id.progress_bar)
        emptyStateText = view.findViewById(R.id.empty_state_text)
        
        // Configure RecyclerView
        recyclerView.layoutManager = LinearLayoutManager(requireContext()).apply {
            stackFromEnd = true // Messages should stack from bottom
        }
    }
    
    private fun setupAdapter() {
        
        // Create instance of the factory
        val viewHolderFactory = MessageViewHolderFactory()

        // Create adapter with the factory
        messageAdapter = MessageAdapter(viewHolderFactory)
    
        // Set the view model for the adapter
        messageAdapter.setChatViewModel(viewModel)

        // Set edit message listener
        messageAdapter.setEditMessageListener(object : MessageAdapter.EditMessageListener {
            override fun onMessageEdited(messageId: String, newContent: String) {
                viewModel.editMessage(messageId, newContent)
            }
        })


        // Set up version navigation listener
        messageAdapter.setVersionNavigationListener(object : MessageAdapter.MessageVersionNavigationListener {
            override fun onPreviousVersion(threadId: String) {
                viewModel.navigateToPreviousVersion(threadId)
            }
        
            override fun onNextVersion(threadId: String) {
                viewModel.navigateToNextVersion(threadId)
            }
        
            override fun navigateToSpecificVersion(threadId: String, versionIndex: Int) {
                viewModel.navigateToSpecificVersion(threadId, versionIndex)
            }
        })
        recyclerView.adapter = messageAdapter
    }

    private fun observeViewModel() {
        // Observe messages
        viewModel.messages.observe(viewLifecycleOwner) { messages ->
            if (messages.isEmpty()) {
                showEmptyState(true)
            } else {
                showEmptyState(false)
                messageAdapter.submitList(messages)
                // Scroll to bottom after a short delay to ensure adapter has updated
                recyclerView.postDelayed({
                    recyclerView.scrollToPosition(messages.size - 1)
                }, 100)
            }
        }
        
        // Observe loading state
        viewModel.isLoading.observe(viewLifecycleOwner) { isLoading ->
            progressBar.visibility = if (isLoading) View.VISIBLE else View.GONE
            
            // Disable send button during loading
            sendButton.isEnabled = !isLoading
            messageInput.isEnabled = !isLoading
        }
    }
    
    private fun setupListeners() {
        // Send button click
        sendButton.setOnClickListener {
            val message = messageInput.text.toString().trim()
            if (message.isNotEmpty()) {
                sendMessage(message)
                messageInput.text?.clear()
            }
        }
        
        // Enter key press in input field
        messageInput.setOnEditorActionListener { _, actionId, _ ->
            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_SEND) {
                val message = messageInput.text.toString().trim()
                if (message.isNotEmpty()) {
                    sendMessage(message)
                    messageInput.text?.clear()
                }
                true
            } else {
                false
            }
        }
    }
    
    private fun sendMessage(content: String) {
        viewModel.sendMessage(content)
    }
    
    private fun showEditDialog(message: Message) {
        if (message.type != MessageType.USER) return
        
        val editText = TextInputEditText(requireContext()).apply {
            setText(message.content)
            setSelection(message.content?.length ?: 0)
        }
        
        AlertDialog.Builder(requireContext())
            .setTitle("Edit Message")
            .setView(editText)
            .setPositiveButton("Save") { _, _ ->
                val newContent = editText.text.toString().trim()
                if (newContent.isNotEmpty() && newContent != message.content) {
                    viewModel.editMessage(message.id, newContent)
                }
            }
            .setNegativeButton("Cancel", null)
            .show()
    }
    
    private fun copyToClipboard(content: String) {
        val clipboard = requireContext().getSystemService(android.content.Context.CLIPBOARD_SERVICE) as android.content.ClipboardManager
        val clip = android.content.ClipData.newPlainText("Message", content)
        clipboard.setPrimaryClip(clip)
        Toast.makeText(requireContext(), "Copied to clipboard", Toast.LENGTH_SHORT).show()
    }
    
    private fun showEmptyState(show: Boolean) {
        if (show) {
            emptyStateText.visibility = View.VISIBLE
            recyclerView.visibility = View.GONE
        } else {
            emptyStateText.visibility = View.GONE
            recyclerView.visibility = View.VISIBLE
        }
    }
}